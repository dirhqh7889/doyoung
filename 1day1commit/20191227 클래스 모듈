클래스) 똑같은 무엇인가를 계속해서 만들어 낼 수 있는 설계 도면
ex)
class Cookie:
    pass
ㅡㅡㅡㅡㅡ
매서드(Method) = 클래스 안에 구현된 함수
class FourCal:
    def setdata(self, first, second):         =매서드의 매개변수
        self.first = first                        =매서드의 수행문
        self.second = second                =매서드의 수행문
=> 파이썬 메서드의 첫 번째 매개변수 이름은 관례적으로 self를 사용

여기서
a.setdata(4,2)처럼 호출되면 
self.first = 4
self.second = 2 가 되고

self는 객체 a이므로

a.first = 4          =a 객체에 객체변수 first가 생성되고 값 4가 저장
a.second = 2      =a 객체에 객체변수 second가 생성되고 값 2가 저장

더하기 기능)
ex)
class FourCal:
    def setdata(self, first, second):
        self.first = first
        self.second = second
    def add(self):                                   = add 매서드의 매개변수 self
        result = self.first + self.second          = 반환 값 result
        return result

곱하기, 빼기, 나누기 기능)
ex)
class FourCal:
    def setdata(self, first, second):
        self.first = first
        self.second = second
    def add(self):                                 
        result = self.first + self.second          
        return result
    def mul(self):
        result = self.first * self.second
        return result
    def sub(self):
        result = self.first - self.second
        return result
    def div(self):
        result = self.first / self.second
        return result

생성자) 객체가 생성될 때 자동으로 호출되는 매서드
    a = FourCal()
    a.add()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 6, in add
AttributeError: 'FourCal' object has no attribute 'first'

setdata 메서드를 수행하지 않고 add메서드를 수행하면 오류 발생
setdata 매서드를 수행해야 객체 a의 객체변수 first와 second가 생성되기 때문이다.
따라서 생성자가 필요하다
__init__를 사용하면 생성자가 된다.
class FourCal:
    def __int__(self,first, second):
        self.first = first
        self.first = second
    def setdata(self, first, second):
        self.first = first
        self.second = second
    def add(self):                                 
        result = self.first + self.second          
        return result
    def mul(self):
        result = self.first * self.second
        return result
    def sub(self):
        result = self.first - self.second
        return result
    def div(self):
        result = self.first / self.second
        return result

매서드 이름을 __init__으로 했기 때문에 생성자로 인식되어 객체가 생성되는 시점에 자동으로 호출

클래스의 상속) 클래스를 만들 때 다른 클래스의 기능을 물려받을 수 있게 만드는 것
ex) class MoreFourCal(FoutCal):
          pass
class 클래스 이름(상속할 클래스 이름)
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
모듈) 함수나 변수 또는 클래스가 모아 놓은 파일
ex)
import 모듈이름

from 모듈이름 import 모듈함수

__name__변수)
ex)
# mod1.py 
def add(a, b): 
    return a+b

def sub(a, b): 
    return a-b

if __name__ == "__main__":
    print(add(1, 4))
    print(sub(4, 2))
=> 직접 이 파일을 실행했을 때는 __name__ == "__main__"이 참이 되어 if문 다음 문장이 수행, 
     반대로 다른 파일에서 이 모듈을 불러서 사용할 때는 __name__ == "__main__"이 
     거짓이 되어 if문 다음 문장이 수행되지 않는다.

모듈은 클래스와 변수도 포함할 수 있다.)
ex)
import mod2
print(mod2.PI)
3.141592

print(mod2.add(mod2.PI, 4.4))
7.541592

다른 파일에서 모듈 불러오기)
# modtest.py
import mod2
result = mod2.add(3, 4)
print(result)






