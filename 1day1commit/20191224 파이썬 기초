파이썬 기초
숫자형) a = 숫자(정수, 실수, 8,16진수)

사칙연산) a + b, a * b, a / b

제곱) a ** b = a의 b제곱

나눗셈) 몫 반환 a / b 나머지 반환 a % b
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
문자열 만드는 방법) '문자' , "문자" , '''문자''' , """문자"""
" , ' 앞에 백슬래시(\)를 사용하면 문자열을 둘러싸는 기호의 의미가 아니라 문자 자체의 뜻을 보인다.

줄 바꿈) \n=> 줄이 길어지면 불편, 연속된 따옴표(''' or """)=>문자열이 여러 줄인 경우

문자열 길이 구하기) len(a) => len 함수는 print 함수처럼 파이썬의 기본 내장 함수

문자열 인덱싱) 무엇인가를 가리킨다. 
ex) life is too short 
    a[3] = e
=>파이썬은 0 부터 숫자를 센다.

문자열 슬라이싱) 무엇인가를 잘라낸다.
ex) life is too short
    a[0:4] = life

문자열 포매팅) 문자열 안의 특정한 값을 바꿔야 할 때 사용
ex) "I eat %s apples" % "five" => s는 문자열
    "I eat %d apples" % 3 => d는 정수(숫자, 변수)
2개 이상값) "I ate %d apples, so I was sick for %s days" % (number, day)

format 함수를 사용한 포매팅)
ex) "I eat {0} apples" .format(3)

문자 개수 세기) count 
ex) a.count('b') 문자열 중 b의 개수 세기

위치 알려주기) find, index
ex) a.find('b') 문자열 중 b가 처음 나온 위치 반환    =>찾는 문자 존재x=-1반환
ex) a.index('t') 문자열 중 t가 처음 나온 위치 반환    =>찾는 문자 존재x=오류 발생  

문자열 삽입) join
ex) ",".join('abcd') 문자 사이에 , 삽입

문자열 나누기) split
ex) a.split() 괄호 공백이면 공백을 기준으로 나눔
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
리스트 자료형)
ex) 리스트명 = [요소1, 요소2, 요소3, ....]

리스트 인덱싱) 문자열처럼 인덱싱 적용 가능
ex) a[0] = 요소1

리스트 슬라이싱) 문자열처럼 슬라이싱 적용 가능
ex) a[0:2] = [요소1, 요소2]

리스트 요소 삭제) del
ex) del a[1]

리스트 요소 추가) append
ex) a.append(4) => 4가 추가됌

리스트 정렬) sort
ex) a.sort() => 숫자는 크기 순으로 문자는 알파벳 순으로 정렬

리스트 위치 알려주기) index
ex) a.index(요소1) = 0

리스트 요소 삽입) insert
ex) a.insert(a, b) => a번째 위치에 b를 삽입
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
튜플(tuple)은 리스트와 거의 비슷
차이점: 리스트는 [] 튜플은 (), 리스트는 생성,삭제,수정 가능 튜플 불가능
ex) 
t1 = ()
t2 = (1,) => 한개의 요소를 가질 땐 뒤에 콤마를 붙인다.
t3 = 1, 2, 3 => 괄호가 없어도 괜찮다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
딕셔너리는 key와 value를 한 쌍으로 갖는 자료형이고 key를 통해 value를 얻는다.
ex) dic = {'name' : 'pey', 'phone' : '0119993323', 'birth' : '1118'}
     a = {'a' : [1,2,3]} => value 값에 리스트도 가능

딕셔너리 쌍 추가) a[key] = 'value'
ex) 
a = {1: 'a'}
a[2] = 'b'
a = {1: 'a', 2: 'b'}

딕셔너리 요소 삭제하기) del
ex) a = {1: 'a', 2: 'b', 'name' : 'pey'}
    del a[1] = {2: 'b', 'name' : 'pey'}

딕셔너리에서 key를 사용해 value얻기)
ex) a = {1: 'a', 2: 'b', 'name' : 'pey'}
    a[1] = 'a'

주의사항) key는 고유한 값이므로 중복된 key값을 설정하면 하나를 제외하고 나머지 것들은 무시된다.

key 리스트 만들기) keys
ex) a.keys() = dict_keys([1, 2, 'name'])

value 리스트 만들기) values
ex) a.values() = dict_values(['a', 'b', 'pey'])

key, value 쌍 얻기)items
ex) a.items() = dict_items([(1, 'a'), (2, 'b'), ('name', 'pey')])

모두 지우기) clear
ex) a.clear()

key로 value 얻기) get
ex) a.get(1) = 'a'        => a[1]와 동일한 결과 값.
차이점: a[1]는 존재하지 않는 키값이면 오류를 발생시키고 a.get(1)이면 None을 돌려준다

key값이 있는지 조사) in
ex) 1 in a = True  
    'IU' in a = False
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
집합 자료형)
ex) s1 = set([1,2,3])
    s1 
    {1, 2, 3}
    s2= set("Hello")
    s2
    {'e', 'H', 'l', 'o'}
특징: 중복을 허용하지 않는다, 순서가 없다. 
       순서가 없기 때문에 인덱싱이 불가능 하다. 딕셔너리랑 비슷
       인덱싱으로 접근하려면 리스트나 튜플로 변환해야 한다.
ex) s1 = set([1,2,3])
>>>l1 = list(s1)
>>>l1
[1,2,3]
>>>l1[0]
1

교집합) &
ex) s1 & s2

합집합) |
ex) s1 | s2

차집합 -
ex) s1 - s2

값 추가) add(1개) update(여러 개)
ex) s1 = set([1, 2, 3])
    s1.add(4)
    s1
{1,2,3,4}
ex) s1 = set([1, 2, 3])
    s1.update([4,5,6])
    s1
{1,2,3,4,5,6}

값 제거) remove
ex) s1.remove(2) = {1,3}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
볼 자료형) 참과 거짓을 나타낸다.

>>>1 == 1
True
>>>2 > 1
True
>>>2 < 1
False

문자열, 리스트, 튜플, 딕셔너리 등의 값이 비어있으면 거짓이 되고 비어있지 않으면 참이 된다.

>>>bool([1,2,3])
True
>>>bool([])
False
>>>bool(0)
False
>>>bool(3)
True
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
변수는 객체를 가리키는 것

변수 이름 = 변수에 저장할 값
ex) a = [1,2,3]

리스트 복사) 
ex) a = b         ===> 주소도 같은 주소가 됌
>>>a is b
True
==> a리스트의 요소 값이 바꾸어도 b도 같이 바뀜

a의 변수 값을 가져오면서 주소는 다른 주소로 만드는 방법)
1. [:] 이용
ex) a = [1,2,3]
>>>b = a[:]
>>>a[1] = 4
>>>a
[1,4,3]
>>>b
[1,2,3]   
===> 주소가 다르기 때문에 a 리스트 값이 변해도 영향을 안끼친다.
2. copy 모듈 이용


