함수) 입력값을 가지고 어떤 일을 수행한 다음에 그 결과물을 내어놓는 것
ex) y = x +1
구조)
def 함수명(매개변수):
    <수행할 문장1>
    <수행할 문장2>
....

def = 함수를 만들 때 사용하는 예약어
매개변수 = 함수에 입력으로 전달되는 값을 받는 변수
ex)
def add(a,b);
    return a + b

return = 함수의 결과값을 돌려주는 명령어

매개변수 vs 인수
인수 = 함수를 호출할 때 전달하는 입력값
ex) 
def add(a,b);
    return a + b    # a,b는 매개변수

print(add(3,4))      # 3,4는 인수

일반적인 함수)
def 함수이름(매개변수):
    <수행할 문장>
    ....
    return 결과값
ex)
def add(a, b):
    result = a + b
    return result

입력값이 없는 함수)
ex)
def say():
    return 'Hi'
....
입력값이 없이 결과값이 Hi

결과값이 없는 함수)
ex) 
def add(a, b)
    print("%d, %d의 합은 %d입니다." %(a, b, a+b))
....
>>> a = add(3, 4)
3, 4의 합은 7입니다. 

>>> a = add(3, 4)
>>> print(a)
None
결과값이 없기 때문에 print(a)를 쓰면 None이 반환된다.
return이 없으면 결과값x

입력값이 여러 개를 받는 함수)
ex)
def add_many(*args): 
     result = 0 
     for i in args: 
         result = result + i 
     return result 
 
*args같이 매개변수 앞에 *을 붙이면 입력값을 모아서 튜플로 만들어준다.
ex)
def add_mul(choice, *args): 
     if choice == "add": 
         result = 0 
         for i in args: 
             result = result + i 
     elif choice == "mul": 
         result = 1 
         for i in args: 
             result = result * i 
     return result 
결과)
result = add_mul('add', 1,2,3,4,5)
    print(result)
15
result = add_mul('mul', 1,2,3,4,5)
    print(result)
120 
add는 모든 입력값을 더하고
mul은 모든 입력값을 곱한다.

***함수의 결과값은 항상 하나이다.
***함수 안에 변수와 함수 밖에 변수가 동일하다면
   함수 안에서 사용하는 매개변수는 밖의 변수와 전혀 상관이 없다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
사용자 입력) input
ex)
a = input()
Life is too short, you need python
a
'Life is too short, you need python'

프롬프트 띄워서 사용자 입력 받기)
input("질문 내용")
ex)
number = input("숫자를 입력하시오:")
숫자를 입력하세요: 3
print(number)
3
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
파일 생성하기)
f = open("새파일.txt", 'w')
f.close()
파일을 생성하기 위해 파이썬 내장 함수 open사용
파일 객체 = open(파일 이름, 파일 열기 모드)

r
읽기모드 - 파일을 읽기만 할 때 사용
w
쓰기모드 - 파일에 내용을 쓸 때 사용
a
추가모드 - 파일의 마지막에 새로운 내용을 추가 시킬 때 사용

f = open("C:/doit/새파일.txt", 'w')
f.close()
새파일.txt 파일을 C:/doit 디렉터리에 생성

파일을 쓰기 모드로 열어 출력값 적기)
ex)
f = open("C:/doit/새파일.txt", 'w')
for i in range(1, 11):
    data = "%d번째 줄입니다.\n" % i
    f.write(data)
f.close()

프로그램의 외부에 저장된 파일을 읽는 여러 가지 방법)

readline() 함수 이용하기)
ex)
f = open("C:/doit/새파일.txt", 'r')
line = f.readline()
print(line)
f.close()
=> 첫번째 줄로 파일을 읽기 모드로 열고 readline()를 사용해서 
파일의 첫번째 줄을 읽고 출력한다.
결과: 1번째 줄입니다.

모든 줄을 읽고 출력하고 싶다면
f = open("C:/doit/새파일.txt", 'r')
while True:
    line = f.readline()
    if not line: break
    print(line)
f.close()
=> while True 무한 루프에서 readline()를 사용해서 파일을 한 줄씩 읽는다.

readlines 함수 사용하기)
ex)
f = open("C:/doit/새파일.txt", 'r')
lines = f.readlines()
for line in lines:
    print(line)
f.close()
=> readlines 함수는 파일의 모든 줄을 읽어서 각각의 줄을 요소로 갖는 리스트로 돌려준다.

read 함수 사용하기)
ex)
f = open("C:/doit/새파일.txt", 'r')
data = f.read()
print(data)
f.close()
=>f.read()는 파일의 내용 전체를 문자열로 돌려준다.

파일에 새로운 내용 추가하기)
ex)
f = open("C:/doit/새파일.txt",'a')
for i in range(11, 20):
    data = "%d번째 줄입니다.\n" % i
    f.write(data)
f.close()
=>쓰기 모드(w)로 이미 존재하는 파일을 열면 그 파일의 내용이 전부 사라진다.
   그래소 원래 값을 유지하면서 새로운 값만 추가할려면 파일 추가 모드(a)로 연다.

with문과 함께 사용하기)
f = open("foo.txt", 'w')
f.write("Life is too short, you need python")
f.close()
파일을 열면 항상 close 해줘야 한다.
with open("foo.txt", "w") as f:
    f.write("Life is too short, you need python")
with문을 사용해서 파일이 자동으로 close된다.



